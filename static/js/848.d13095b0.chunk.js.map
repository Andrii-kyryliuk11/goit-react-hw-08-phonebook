{"version":3,"file":"static/js/848.d13095b0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/Modal/Modal.jsx","utilites/loader.jsx","components/ContactList/ContactList.jsx","components/Pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactList_button__7kL4l\",\"contact\":\"ContactList_contact__0STHS\",\"contactsContainer\":\"ContactList_contactsContainer__1OZYs\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"button__submit\":\"ContactForm_button__submit__nnapz\"};","import 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { addContact, fetchContacts } from '../../redux/contacts/operation';\nimport {\n  Button,\n  FormControl,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n} from '@mui/material';\nimport PersonIcon from '@mui/icons-material/Person';\nimport LocalPhoneRoundedIcon from '@mui/icons-material/LocalPhoneRounded';\n\nexport function ContactForm({ setOpen }) {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(store => store.contacts.isLoading);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(store => store.contacts.items);\n\n  let reservedNames = [];\n\n  contacts.forEach(contact => {\n    reservedNames.push(contact.name);\n  });\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n\n        break;\n      case 'number':\n        setNumber(value);\n\n        break;\n\n      default:\n        console.log(value);\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (reservedNames.includes(name)) {\n      toast.error(`Name ${name} already used!`);\n      return;\n    }\n    const contactToAdd = { name: name, number: number };\n    dispatch(addContact(contactToAdd)).then(\n      toast.success(`Contact ${name} added`)\n    );\n    setName('');\n    setNumber('');\n    setTimeout(() => {\n      dispatch(fetchContacts());\n    }, 700);\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <FormControl>\n          <InputLabel htmlFor=\"component-outlined\">Name</InputLabel>\n          <OutlinedInput\n            id=\"component-outlined\"\n            variant=\"outlined\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            label=\"Name\"\n            sx={{ borderColor: 'black', '&:focus': { borderColor: 'black' } }}\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <PersonIcon />\n              </InputAdornment>\n            }\n            inputProps={{\n              pattern:\n                \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n            }}\n            required\n            onChange={handleChange}\n          />\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"component-outlined\">Phone number</InputLabel>\n          <OutlinedInput\n            id=\"component-outlined\"\n            variant=\"outlined\"\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            label=\"Phone number\"\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <LocalPhoneRoundedIcon />\n              </InputAdornment>\n            }\n            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n            required\n            onChange={handleChange}\n          />\n        </FormControl>\n\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={isLoading}\n          sx={{\n            bgcolor: '#b08bd3',\n            color: '#212122',\n            '&:hover': {\n              bgcolor: '#ae77b7',\n            },\n          }}\n        >\n          Add contact\n        </Button>\n      </form>\n    </>\n  );\n}\n","import Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport { useState } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst style = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: '20%',\n  bgcolor: '#b08bd3',\n  color: '#212122',\n  borderRadius: '4px',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function BasicModal() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        onClick={handleOpen}\n        sx={{\n          bgcolor: '#b08bd3',\n          color: '#212122',\n          '&:hover': {\n            bgcolor: '#ae77b7',\n          },\n        }}\n      >\n        Add contact\n      </Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Add a new contact\n          </Typography>\n          <Typography\n            component=\"div\"\n            id=\"modal-modal-description\"\n            sx={{ mt: 2, textAlign: 'center' }}\n          >\n            <ContactForm setOpen={setOpen} />\n          </Typography>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import Box from '@mui/material/Box';\nimport Skeleton from '@mui/material/Skeleton';\n\nexport function Animations() {\n  return (\n    <Box\n      sx={{\n        display: 'grid',\n        gridTemplateColumns: 'auto auto auto auto',\n        justifyContent: 'center',\n        gap: 2,\n        padding: 0,\n        margin: 0,\n      }}\n    >\n      <Skeleton variant=\"rectangular\" width={450} height={160} />\n\n      <Skeleton variant=\"rectangular\" width={450} height={160} />\n      <Skeleton variant=\"rectangular\" width={450} height={160} />\n      <Skeleton variant=\"rectangular\" width={450} height={160} />\n    </Box>\n  );\n}\n","import css from './ContactList.module.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useEffect } from 'react';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operation';\nimport BasicModal from 'components/Modal/Modal';\nimport { Button } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { Animations } from 'utilites/loader';\n\n\nexport const ContactList = ({ data }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(store => store.contacts.isLoading);\n  const reservedNames = [];\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch(fetchContacts());\n    }, 500);\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Animations />\n      ) : (\n        <div>\n          <div>\n            <ul className={css.contactsContainer}>\n              {data !== [] &&\n                data !== undefined &&\n                data.map(({ name, number, id }, i) => {\n                  reservedNames.push(name);\n                  return (\n                    <li key={id} className={css.contact}>\n                      <Card\n                        sx={{\n                          width: 450,\n                          bgcolor: '#b08bd3',\n                          color: '#212122',\n                        }}\n                      >\n                        <CardContent sx={{ overflow: 'auto' }}>\n                          <Typography variant=\"h4\" component=\"span\">\n                            Name:{name}\n                          </Typography>\n                          <br />\n                          <Typography variant=\"h4\" component=\"span\">\n                            Number:{number}\n                          </Typography>\n                        </CardContent>\n                        <CardActions>\n                          <Button\n                            sx={{\n                              marginLeft: 37.5,\n                              bgcolor: '#b08bd3',\n                              color: '#212122',\n                              '&:hover': {\n                                bgcolor: '#ae77b7',\n                              },\n                            }}\n                            variant=\"contained\"\n                            size=\"small\"\n                            onClick={() => {\n                              dispatch(deleteContact(id));\n                              setTimeout(() => {\n                                dispatch(fetchContacts()).then(\n                                  toast.success(\n                                    `Contact ${name} has been removed!`\n                                  )\n                                );\n                              }, 500);\n                            }}\n                            disabled={isLoading}\n                          >\n                            Delete contact\n                          </Button>\n                        </CardActions>\n                      </Card>\n                    </li>\n                  );\n                })}\n            </ul>\n            <div className={css.button}>\n              <BasicModal />\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\n\nexport default function ContactsPage({ data }) {\n  return <ContactList data={data} />;\n}\n"],"names":["ContactForm","setOpen","dispatch","useDispatch","isLoading","useSelector","store","contacts","useState","name","setName","number","setNumber","items","reservedNames","forEach","contact","push","handleChange","e","currentTarget","value","console","log","className","css","onSubmit","preventDefault","includes","toast","contactToAdd","addContact","then","setTimeout","fetchContacts","FormControl","InputLabel","htmlFor","OutlinedInput","id","variant","type","label","sx","borderColor","startAdornment","InputAdornment","position","Person","inputProps","pattern","required","onChange","LocalPhoneRounded","inputMode","Button","disabled","bgcolor","color","style","display","flexDirection","alignItems","top","left","transform","width","borderRadius","boxShadow","p","BasicModal","open","onClick","Modal","onClose","Box","Typography","component","mt","textAlign","Animations","gridTemplateColumns","justifyContent","gap","padding","margin","Skeleton","height","ContactList","data","useEffect","undefined","map","i","Card","CardContent","overflow","CardActions","marginLeft","size","deleteContact","ContactsPage"],"sourceRoot":""}